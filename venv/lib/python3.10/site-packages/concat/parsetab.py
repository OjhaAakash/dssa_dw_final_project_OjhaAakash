
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPER AMPEREQUAL ASYNC AT ATEQUAL AWAIT BIN_BOOL_FUNC CIRCUMFLEX CIRCUMFLEXEQUAL COLON COMMA COMMENT DEDENT DEF DOLLARSIGN DOT DOUBLESLASH DOUBLESLASHEQUAL DOUBLESTAR DOUBLESTAREQUAL ELLIPSIS ENCODING ENDMARKER EQEQUAL EQUAL ERRORTOKEN FROM GREATER GREATEREQUAL IMPORT INDENT LBRACE LEFTSHIFT LEFTSHIFTEQUAL LESS LESSEQUAL LPAR LSQB MINEQUAL MINUS NAME NEWLINE NL NONE NOTEQUAL NT_OFFSET NUMBER OP PERCENT PERCENTEQUAL PLUS PLUSEQUAL RARROW RBRACE RIGHTSHIFT RIGHTSHIFTEQUAL RPAR RSQB SEMI SLASH SLASHEQUAL STAR STAREQUAL STRING TILDE UNARY_BOOL_FUNC VBAR VBAREQUALmodule : module_encoding\n              | module_statement\n              | module_newline\n              | empty_module\n    empty_module : emptymodule_newline : NEWLINE modulemodule_statement : statement module ENDMARKER\n                        | statement module\n    module_encoding : ENCODING modulestatement : terminated_stmt_list\n                 | compound_stmt\n    compound_stmt : funcdeffuncdef : DEF funcname COLON suitefuncname : NAMEsuite : terminated_stmt_list\n             | indented_block\n    terminated_stmt_list : stmt_list NEWLINEindented_block : NEWLINE INDENT statement_plus DEDENTstatement_plus : statement_statement_plus\n                      | statement\n    statement_statement_plus : statement statement_plusstmt_list : simple_stmt\n                 | semi_stmt_list\n                 | simple_stmt SEMI\n    semi_stmt_list : SEMI simple_stmt stmt_listsimple_stmt : expression\n                   | import_stmt\n                   | from_import_stmtimport_stmt : IMPORT module_namemodule_name : NAME\n                   | NAME DOT module_namefrom_import_stmt : FROM NAME IMPORT NAMEfrom_import_stmt : FROM NAME IMPORT STARexpression : word expression\n                  | wordword : implicit_string_push\n            | bin_bool_func\n            | unary_bool_func\n            | func_compose\n            | implicit_number_push\n            | push_primary\n            | push_plus\n            | attributeref\n            | subscription\n            | none\n            | implicit_dict_push\n    implicit_dict_push : LBRACE RBRACEnone : NONEattributeref : DOT NAMEimplicit_number_push : NUMBERpush_primary : DOLLARSIGN primaryprimary : atom\n               | subscription\n               | attributeref\n    subscription : LSQB expression RSQBatom : NAME\n            | enclosure\n    enclosure : parenth_formparenth_form : LPAR expression RPARpush_plus : DOLLARSIGN PLUSimplicit_string_push : STRINGbin_bool_func : BIN_BOOL_FUNCunary_bool_func : UNARY_BOOL_FUNCfunc_compose : NAMEempty :'
    
_lr_action_items = {'ENCODING':([0,6,7,8,10,11,13,48,76,77,78,88,],[6,6,6,6,-10,-11,-12,-17,-13,-15,-16,-18,]),'NEWLINE':([0,6,7,8,10,11,12,13,14,15,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,49,53,54,55,57,58,59,60,61,62,63,64,66,68,70,71,75,76,77,78,80,81,82,83,88,],[8,8,8,8,-10,-11,48,-12,-22,-23,-26,-27,-28,-35,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,-48,-17,-24,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,-49,-47,-25,79,-55,-13,-15,-16,-31,-32,-33,-59,-18,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,13,45,46,47,48,69,76,77,78,88,],[-65,0,-1,-2,-3,-4,-65,-65,-65,-5,-10,-11,-12,-9,-8,-6,-17,-7,-13,-15,-16,-18,]),'DEF':([0,6,7,8,10,11,13,48,76,77,78,84,87,88,],[17,17,17,17,-10,-11,-12,-17,-13,-15,-16,17,17,-18,]),'SEMI':([0,6,7,8,10,11,13,14,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,50,53,54,55,57,58,59,60,61,62,63,64,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[16,16,16,16,-10,-11,-12,49,-26,-27,-28,-35,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,-48,-17,16,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,-49,-47,16,-55,-13,-15,-16,-31,-32,-33,-59,16,16,-18,]),'IMPORT':([0,6,7,8,10,11,13,16,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,50,53,54,55,56,57,58,59,60,61,62,63,64,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[22,22,22,22,-10,-11,-12,22,-26,-27,-28,-35,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,-48,-17,22,-34,-29,-30,73,-51,-60,-52,-53,-54,-56,-57,-58,-49,-47,22,-55,-13,-15,-16,-31,-32,-33,-59,22,22,-18,]),'FROM':([0,6,7,8,10,11,13,16,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,48,50,53,54,55,57,58,59,60,61,62,63,64,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[23,23,23,23,-10,-11,-12,23,-26,-27,-28,-35,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,-48,-17,23,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,-49,-47,23,-55,-13,-15,-16,-31,-32,-33,-59,23,23,-18,]),'STRING':([0,6,7,8,10,11,13,16,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,48,50,53,54,55,57,58,59,60,61,62,63,64,65,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[36,36,36,36,-10,-11,-12,36,-26,-27,-28,36,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,36,-48,-17,36,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,36,-49,-47,36,-55,-13,-15,-16,-31,-32,-33,-59,36,36,-18,]),'BIN_BOOL_FUNC':([0,6,7,8,10,11,13,16,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,48,50,53,54,55,57,58,59,60,61,62,63,64,65,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[37,37,37,37,-10,-11,-12,37,-26,-27,-28,37,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,37,-48,-17,37,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,37,-49,-47,37,-55,-13,-15,-16,-31,-32,-33,-59,37,37,-18,]),'UNARY_BOOL_FUNC':([0,6,7,8,10,11,13,16,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,48,50,53,54,55,57,58,59,60,61,62,63,64,65,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[38,38,38,38,-10,-11,-12,38,-26,-27,-28,38,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,38,-48,-17,38,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,38,-49,-47,38,-55,-13,-15,-16,-31,-32,-33,-59,38,38,-18,]),'NAME':([0,6,7,8,10,11,13,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,48,50,53,54,55,57,58,59,60,61,62,63,64,65,66,68,71,72,73,75,76,77,78,80,81,82,83,84,87,88,],[24,24,24,24,-10,-11,-12,24,52,-26,-27,-28,24,55,56,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,62,66,24,-48,-17,24,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,24,-49,-47,24,55,81,-55,-13,-15,-16,-31,-32,-33,-59,24,24,-18,]),'NUMBER':([0,6,7,8,10,11,13,16,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,48,50,53,54,55,57,58,59,60,61,62,63,64,65,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[39,39,39,39,-10,-11,-12,39,-26,-27,-28,39,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,39,-48,-17,39,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,39,-49,-47,39,-55,-13,-15,-16,-31,-32,-33,-59,39,39,-18,]),'DOLLARSIGN':([0,6,7,8,10,11,13,16,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,48,50,53,54,55,57,58,59,60,61,62,63,64,65,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[40,40,40,40,-10,-11,-12,40,-26,-27,-28,40,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,40,-48,-17,40,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,40,-49,-47,40,-55,-13,-15,-16,-31,-32,-33,-59,40,40,-18,]),'DOT':([0,6,7,8,10,11,13,16,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,48,50,53,54,55,57,58,59,60,61,62,63,64,65,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[41,41,41,41,-10,-11,-12,41,-26,-27,-28,41,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,41,41,-48,-17,41,-34,-29,72,-51,-60,-52,-53,-54,-56,-57,-58,41,-49,-47,41,-55,-13,-15,-16,-31,-32,-33,-59,41,41,-18,]),'LSQB':([0,6,7,8,10,11,13,16,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,48,50,53,54,55,57,58,59,60,61,62,63,64,65,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[42,42,42,42,-10,-11,-12,42,-26,-27,-28,42,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,42,42,-48,-17,42,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,42,-49,-47,42,-55,-13,-15,-16,-31,-32,-33,-59,42,42,-18,]),'NONE':([0,6,7,8,10,11,13,16,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,48,50,53,54,55,57,58,59,60,61,62,63,64,65,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[43,43,43,43,-10,-11,-12,43,-26,-27,-28,43,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,43,-48,-17,43,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,43,-49,-47,43,-55,-13,-15,-16,-31,-32,-33,-59,43,43,-18,]),'LBRACE':([0,6,7,8,10,11,13,16,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,48,50,53,54,55,57,58,59,60,61,62,63,64,65,66,68,71,75,76,77,78,80,81,82,83,84,87,88,],[44,44,44,44,-10,-11,-12,44,-26,-27,-28,44,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,44,-48,-17,44,-34,-29,-30,-51,-60,-52,-53,-54,-56,-57,-58,44,-49,-47,44,-55,-13,-15,-16,-31,-32,-33,-59,44,44,-18,]),'ENDMARKER':([2,3,4,5,6,7,8,9,10,11,13,45,46,47,48,69,76,77,78,88,],[-1,-2,-3,-4,-65,-65,-65,-5,-10,-11,-12,-9,69,-6,-17,-7,-13,-15,-16,-18,]),'DEDENT':([10,11,13,48,76,77,78,85,86,87,88,89,],[-10,-11,-12,-17,-13,-15,-16,88,-19,-20,-18,-21,]),'RSQB':([21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,53,57,58,59,60,61,62,63,64,66,67,68,75,83,],[-35,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,-48,-34,-51,-60,-52,-53,-54,-56,-57,-58,-49,75,-47,-55,-59,]),'RPAR':([21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,53,57,58,59,60,61,62,63,64,66,68,74,75,83,],[-35,-64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-61,-62,-63,-50,-48,-34,-51,-60,-52,-53,-54,-56,-57,-58,-49,-47,83,-55,-59,]),'PLUS':([40,],[58,]),'LPAR':([40,],[65,]),'RBRACE':([44,],[68,]),'COLON':([51,52,],[71,-14,]),'STAR':([73,],[82,]),'INDENT':([79,],[84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,6,7,8,],[1,45,46,47,]),'module_encoding':([0,6,7,8,],[2,2,2,2,]),'module_statement':([0,6,7,8,],[3,3,3,3,]),'module_newline':([0,6,7,8,],[4,4,4,4,]),'empty_module':([0,6,7,8,],[5,5,5,5,]),'statement':([0,6,7,8,84,87,],[7,7,7,7,87,87,]),'empty':([0,6,7,8,],[9,9,9,9,]),'terminated_stmt_list':([0,6,7,8,71,84,87,],[10,10,10,10,77,10,10,]),'compound_stmt':([0,6,7,8,84,87,],[11,11,11,11,11,11,]),'stmt_list':([0,6,7,8,50,71,84,87,],[12,12,12,12,70,12,12,12,]),'funcdef':([0,6,7,8,84,87,],[13,13,13,13,13,13,]),'simple_stmt':([0,6,7,8,16,50,71,84,87,],[14,14,14,14,50,14,14,14,14,]),'semi_stmt_list':([0,6,7,8,50,71,84,87,],[15,15,15,15,15,15,15,15,]),'expression':([0,6,7,8,16,21,42,50,65,71,84,87,],[18,18,18,18,18,53,67,18,74,18,18,18,]),'import_stmt':([0,6,7,8,16,50,71,84,87,],[19,19,19,19,19,19,19,19,19,]),'from_import_stmt':([0,6,7,8,16,50,71,84,87,],[20,20,20,20,20,20,20,20,20,]),'word':([0,6,7,8,16,21,42,50,65,71,84,87,],[21,21,21,21,21,21,21,21,21,21,21,21,]),'implicit_string_push':([0,6,7,8,16,21,42,50,65,71,84,87,],[25,25,25,25,25,25,25,25,25,25,25,25,]),'bin_bool_func':([0,6,7,8,16,21,42,50,65,71,84,87,],[26,26,26,26,26,26,26,26,26,26,26,26,]),'unary_bool_func':([0,6,7,8,16,21,42,50,65,71,84,87,],[27,27,27,27,27,27,27,27,27,27,27,27,]),'func_compose':([0,6,7,8,16,21,42,50,65,71,84,87,],[28,28,28,28,28,28,28,28,28,28,28,28,]),'implicit_number_push':([0,6,7,8,16,21,42,50,65,71,84,87,],[29,29,29,29,29,29,29,29,29,29,29,29,]),'push_primary':([0,6,7,8,16,21,42,50,65,71,84,87,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'push_plus':([0,6,7,8,16,21,42,50,65,71,84,87,],[31,31,31,31,31,31,31,31,31,31,31,31,]),'attributeref':([0,6,7,8,16,21,40,42,50,65,71,84,87,],[32,32,32,32,32,32,61,32,32,32,32,32,32,]),'subscription':([0,6,7,8,16,21,40,42,50,65,71,84,87,],[33,33,33,33,33,33,60,33,33,33,33,33,33,]),'none':([0,6,7,8,16,21,42,50,65,71,84,87,],[34,34,34,34,34,34,34,34,34,34,34,34,]),'implicit_dict_push':([0,6,7,8,16,21,42,50,65,71,84,87,],[35,35,35,35,35,35,35,35,35,35,35,35,]),'funcname':([17,],[51,]),'module_name':([22,72,],[54,80,]),'primary':([40,],[57,]),'atom':([40,],[59,]),'enclosure':([40,],[63,]),'parenth_form':([40,],[64,]),'suite':([71,],[76,]),'indented_block':([71,],[78,]),'statement_plus':([84,87,],[85,89,]),'statement_statement_plus':([84,87,],[86,86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> module_encoding','module',1,'p_module','parse.py',24),
  ('module -> module_statement','module',1,'p_module','parse.py',25),
  ('module -> module_newline','module',1,'p_module','parse.py',26),
  ('module -> empty_module','module',1,'p_module','parse.py',27),
  ('empty_module -> empty','empty_module',1,'p_empty_module','parse.py',33),
  ('module_newline -> NEWLINE module','module_newline',2,'p_module_newline','parse.py',38),
  ('module_statement -> statement module ENDMARKER','module_statement',3,'p_module_statment','parse.py',43),
  ('module_statement -> statement module','module_statement',2,'p_module_statment','parse.py',44),
  ('module_encoding -> ENCODING module','module_encoding',2,'p_module_encoding','parse.py',54),
  ('statement -> terminated_stmt_list','statement',1,'p_statement','parse.py',65),
  ('statement -> compound_stmt','statement',1,'p_statement','parse.py',66),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','parse.py',72),
  ('funcdef -> DEF funcname COLON suite','funcdef',4,'p_funcdef','parse.py',77),
  ('funcname -> NAME','funcname',1,'p_funcname','parse.py',90),
  ('suite -> terminated_stmt_list','suite',1,'p_suite','parse.py',95),
  ('suite -> indented_block','suite',1,'p_suite','parse.py',96),
  ('terminated_stmt_list -> stmt_list NEWLINE','terminated_stmt_list',2,'p_terminated_stmt_list','parse.py',102),
  ('indented_block -> NEWLINE INDENT statement_plus DEDENT','indented_block',4,'p_indented_block','parse.py',107),
  ('statement_plus -> statement_statement_plus','statement_plus',1,'p_statement_plus','parse.py',112),
  ('statement_plus -> statement','statement_plus',1,'p_statement_plus','parse.py',113),
  ('statement_statement_plus -> statement statement_plus','statement_statement_plus',2,'p_statement_statement_plus','parse.py',121),
  ('stmt_list -> simple_stmt','stmt_list',1,'p_stmt_list','parse.py',128),
  ('stmt_list -> semi_stmt_list','stmt_list',1,'p_stmt_list','parse.py',129),
  ('stmt_list -> simple_stmt SEMI','stmt_list',2,'p_stmt_list','parse.py',130),
  ('semi_stmt_list -> SEMI simple_stmt stmt_list','semi_stmt_list',3,'p_semi_stmt_list','parse.py',136),
  ('simple_stmt -> expression','simple_stmt',1,'p_simple_stmt','parse.py',141),
  ('simple_stmt -> import_stmt','simple_stmt',1,'p_simple_stmt','parse.py',142),
  ('simple_stmt -> from_import_stmt','simple_stmt',1,'p_simple_stmt','parse.py',143),
  ('import_stmt -> IMPORT module_name','import_stmt',2,'p_import_stmt','parse.py',148),
  ('module_name -> NAME','module_name',1,'p_module_name','parse.py',154),
  ('module_name -> NAME DOT module_name','module_name',3,'p_module_name','parse.py',155),
  ('from_import_stmt -> FROM NAME IMPORT NAME','from_import_stmt',4,'p_from_import_stmt','parse.py',163),
  ('from_import_stmt -> FROM NAME IMPORT STAR','from_import_stmt',4,'p_from_import_star','parse.py',170),
  ('expression -> word expression','expression',2,'p_expression','parse.py',181),
  ('expression -> word','expression',1,'p_expression','parse.py',182),
  ('word -> implicit_string_push','word',1,'p_word','parse.py',187),
  ('word -> bin_bool_func','word',1,'p_word','parse.py',188),
  ('word -> unary_bool_func','word',1,'p_word','parse.py',189),
  ('word -> func_compose','word',1,'p_word','parse.py',190),
  ('word -> implicit_number_push','word',1,'p_word','parse.py',191),
  ('word -> push_primary','word',1,'p_word','parse.py',192),
  ('word -> push_plus','word',1,'p_word','parse.py',193),
  ('word -> attributeref','word',1,'p_word','parse.py',194),
  ('word -> subscription','word',1,'p_word','parse.py',195),
  ('word -> none','word',1,'p_word','parse.py',196),
  ('word -> implicit_dict_push','word',1,'p_word','parse.py',197),
  ('implicit_dict_push -> LBRACE RBRACE','implicit_dict_push',2,'p_implicit_dict_push','parse.py',203),
  ('none -> NONE','none',1,'p_none','parse.py',209),
  ('attributeref -> DOT NAME','attributeref',2,'p_attributeref','parse.py',215),
  ('implicit_number_push -> NUMBER','implicit_number_push',1,'p_implicit_number_push','parse.py',222),
  ('push_primary -> DOLLARSIGN primary','push_primary',2,'p_push_primary','parse.py',228),
  ('primary -> atom','primary',1,'p_primary','parse.py',247),
  ('primary -> subscription','primary',1,'p_primary','parse.py',248),
  ('primary -> attributeref','primary',1,'p_primary','parse.py',249),
  ('subscription -> LSQB expression RSQB','subscription',3,'p_subscription','parse.py',255),
  ('atom -> NAME','atom',1,'p_atom','parse.py',270),
  ('atom -> enclosure','atom',1,'p_atom','parse.py',271),
  ('enclosure -> parenth_form','enclosure',1,'p_enclosure','parse.py',281),
  ('parenth_form -> LPAR expression RPAR','parenth_form',3,'p_parenth_form','parse.py',286),
  ('push_plus -> DOLLARSIGN PLUS','push_plus',2,'p_push_plus','parse.py',291),
  ('implicit_string_push -> STRING','implicit_string_push',1,'p_implicit_string_push','parse.py',297),
  ('bin_bool_func -> BIN_BOOL_FUNC','bin_bool_func',1,'p_bin_bool_func','parse.py',303),
  ('unary_bool_func -> UNARY_BOOL_FUNC','unary_bool_func',1,'p_unary_bool_func','parse.py',310),
  ('func_compose -> NAME','func_compose',1,'p_func_compose','parse.py',316),
  ('empty -> <empty>','empty',0,'p_empty','parse.py',346),
]
